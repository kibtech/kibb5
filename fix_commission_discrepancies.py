#!/usr/bin/env python3
"""
Fix Commission Discrepancies
Targeted fixes for the KSh 1,427 discrepancy identified in investigation.
"""
import os
import sys

# Add the app directory to the Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'app'))

from app import create_app, db
from app.models import *
from sqlalchemy import func
from decimal import Decimal

def fix_commission_discrepancies():
    """Fix the specific commission discrepancies identified"""
    
    app = create_app()
    
    with app.app_context():
        print("üîß Fixing Commission Discrepancies")
        print("=" * 50)
        
        print("üìã Issues Identified:")
        print("1. CHRISTOPHER PORIOT: KSh 1,440 discrepancy")
        print("2. SENIOR MARKETING OFFICER: KSh 10.00 in wallet, 0 commission records")
        print("3. EMMKASH: KSh 3.00 in wallet, 0 commission records")
        
        print(f"\nüîç Pre-Fix Analysis:")
        print("=" * 25)
        
        # Check current state
        total_commission_earned = db.session.query(func.sum(Commission.amount)).scalar() or 0
        total_wallet_balance = db.session.query(func.sum(Wallet.commission_balance)).scalar() or 0
        expected_balance = float(total_commission_earned)
        actual_balance = float(total_wallet_balance)
        discrepancy = expected_balance - actual_balance
        
        print(f"üí∞ Total Commission Records: KSh {total_commission_earned:,.2f}")
        print(f"üí∞ Total Wallet Balances: KSh {total_wallet_balance:,.2f}")
        print(f"üìä Current Discrepancy: KSh {discrepancy:,.2f}")
        
        print(f"\nüõ†Ô∏è  Applying Fixes:")
        print("=" * 20)
        
        # Fix 1: CHRISTOPHER PORIOT discrepancy
        print(f"\n1. üîß Fixing CHRISTOPHER PORIOT discrepancy...")
        christopher = User.query.filter_by(email='christopher@kibtech.co.ke').first()
        if christopher and christopher.wallet:
            # Get his commission records
            commission_total = db.session.query(func.sum(Commission.amount)).filter(
                Commission.referrer_id == christopher.id
            ).scalar() or 0
            
            print(f"   üìä Commission Records Total: KSh {commission_total:,.2f}")
            print(f"   üí∞ Current Wallet Balance: KSh {christopher.wallet.commission_balance:,.2f}")
            
            # Fix the wallet balance
            old_balance = christopher.wallet.commission_balance
            christopher.wallet.commission_balance = commission_total
            christopher.wallet.recalculate_balance()
            
            print(f"   ‚úÖ Fixed: KSh {old_balance:,.2f} ‚Üí KSh {christopher.wallet.commission_balance:,.2f}")
        else:
            print(f"   ‚ùå User not found or no wallet")
        
        # Fix 2: SENIOR MARKETING OFFICER - create commission record
        print(f"\n2. üîß Fixing SENIOR MARKETING OFFICER missing commission record...")
        senior_officer = User.query.filter_by(email='deleted_4_kibtechclientcare@gmail.com').first()
        if senior_officer and senior_officer.wallet:
            wallet_balance = float(senior_officer.wallet.commission_balance)
            print(f"   üí∞ Wallet Balance: KSh {wallet_balance:,.2f}")
            
            # Check if commission record exists
            existing_commission = Commission.query.filter_by(
                referrer_id=senior_officer.id,
                amount=wallet_balance
            ).first()
            
            if not existing_commission:
                # Create commission record for the wallet balance
                commission = Commission(
                    referrer_id=senior_officer.id,
                    order_id=None,
                    amount=wallet_balance,
                    commission_type='manual',
                    description='Commission balance reconciliation - missing record'
                )
                db.session.add(commission)
                print(f"   ‚úÖ Created commission record: KSh {wallet_balance:,.2f}")
            else:
                print(f"   ‚ÑπÔ∏è  Commission record already exists")
        else:
            print(f"   ‚ùå User not found or no wallet")
        
        # Fix 3: EMMKASH - create commission record
        print(f"\n3. üîß Fixing EMMKASH missing commission record...")
        emmkash = User.query.filter_by(email='deleted_1_emmkashkash88@gmail.com').first()
        if emmkash and emmkash.wallet:
            wallet_balance = float(emmkash.wallet.commission_balance)
            print(f"   üí∞ Wallet Balance: KSh {wallet_balance:,.2f}")
            
            # Check if commission record exists
            existing_commission = Commission.query.filter_by(
                referrer_id=emmkash.id,
                amount=wallet_balance
            ).first()
            
            if not existing_commission:
                # Create commission record for the wallet balance
                commission = Commission(
                    referrer_id=emmkash.id,
                    order_id=None,
                    amount=wallet_balance,
                    commission_type='manual',
                    description='Commission balance reconciliation - missing record'
                )
                db.session.add(commission)
                print(f"   ‚úÖ Created commission record: KSh {wallet_balance:,.2f}")
            else:
                print(f"   ‚ÑπÔ∏è  Commission record already exists")
        else:
            print(f"   ‚ùå User not found or no wallet")
        
        # Commit all changes
        print(f"\nüíæ Committing database changes...")
        try:
            db.session.commit()
            print(f"   ‚úÖ Database changes committed successfully")
        except Exception as e:
            print(f"   ‚ùå Failed to commit changes: {str(e)}")
            db.session.rollback()
            return
        
        # Verify fixes
        print(f"\n‚úÖ Post-Fix Verification:")
        print("=" * 30)
        
        # Check new totals
        new_total_commission_earned = db.session.query(func.sum(Commission.amount)).scalar() or 0
        new_total_wallet_balance = db.session.query(func.sum(Wallet.commission_balance)).scalar() or 0
        new_expected_balance = float(new_total_commission_earned)
        new_actual_balance = float(new_total_wallet_balance)
        new_discrepancy = new_expected_balance - new_actual_balance
        
        print(f"üí∞ New Commission Records Total: KSh {new_total_commission_earned:,.2f}")
        print(f"üí∞ New Wallet Balances Total: KSh {new_total_wallet_balance:,.2f}")
        print(f"üìä New Discrepancy: KSh {new_discrepancy:,.2f}")
        
        # Check individual fixes
        print(f"\nüîç Individual Fix Verification:")
        
        # Christopher
        if christopher and christopher.wallet:
            christopher_commissions = db.session.query(func.sum(Commission.amount)).filter(
                Commission.referrer_id == christopher.id
            ).scalar() or 0
            print(f"   üë§ CHRISTOPHER PORIOT:")
            print(f"      üí∞ Commission Records: KSh {christopher_commissions:,.2f}")
            print(f"      üí∞ Wallet Balance: KSh {christopher.wallet.commission_balance:,.2f}")
            print(f"      ‚úÖ Status: {'Fixed' if abs(float(christopher_commissions) - float(christopher.wallet.commission_balance)) < 0.01 else 'Still has issues'}")
        
        # Senior Officer
        if senior_officer and senior_officer.wallet:
            senior_officer_commissions = db.session.query(func.sum(Commission.amount)).filter(
                Commission.referrer_id == senior_officer.id
            ).scalar() or 0
            print(f"   üë§ SENIOR MARKETING OFFICER:")
            print(f"      üí∞ Commission Records: KSh {senior_officer_commissions:,.2f}")
            print(f"      üí∞ Wallet Balance: KSh {senior_officer.wallet.commission_balance:,.2f}")
            print(f"      ‚úÖ Status: {'Fixed' if abs(float(senior_officer_commissions) - float(senior_officer.wallet.commission_balance)) < 0.01 else 'Still has issues'}")
        
        # Emmkash
        if emmkash and emmkash.wallet:
            emmkash_commissions = db.session.query(func.sum(Commission.amount)).filter(
                Commission.referrer_id == emmkash.id
            ).scalar() or 0
            print(f"   üë§ EMMKASH:")
            print(f"      üí∞ Commission Records: KSh {emmkash_commissions:,.2f}")
            print(f"      üí∞ Wallet Balance: KSh {emmkash.wallet.commission_balance:,.2f}")
            print(f"      ‚úÖ Status: {'Fixed' if abs(float(emmkash_commissions) - float(emmkash.wallet.commission_balance)) < 0.01 else 'Still has issues'}")
        
        # Summary
        print(f"\nüìä Fix Summary:")
        print("=" * 15)
        print(f"üîß Issues Fixed: 3")
        print(f"üí∞ Discrepancy Before: KSh {discrepancy:,.2f}")
        print(f"üí∞ Discrepancy After: KSh {new_discrepancy:,.2f}")
        print(f"üìà Improvement: KSh {discrepancy - new_discrepancy:,.2f}")
        
        if new_discrepancy < 1.0:
            print(f"‚úÖ SUCCESS: Discrepancy resolved!")
        else:
            print(f"‚ö†Ô∏è  WARNING: Some discrepancy remains - further investigation needed")
        
        print(f"\nüí° Recommendations:")
        print("=" * 20)
        print(f"1. ‚úÖ Run analytics again to verify fixes")
        print(f"2. üìä Monitor data quality indicators in admin dashboard")
        print(f"3. üîç Investigate any remaining discrepancies")
        print(f"4. üõ°Ô∏è  Implement automated consistency checks")
        print(f"5. üì± Test withdrawal system functionality")

def create_commission_reconciliation_report():
    """Create a detailed reconciliation report"""
    
    app = create_app()
    
    with app.app_context():
        print(f"\nüìã Commission Reconciliation Report")
        print("=" * 40)
        
        # Get all users with commission balances
        users_with_commissions = db.session.query(User).join(Wallet).filter(
            Wallet.commission_balance > 0
        ).all()
        
        print(f"üë• Users with Commission Balances: {len(users_with_commissions)}")
        print(f"\nüìä Detailed Reconciliation:")
        print("-" * 30)
        
        total_expected = 0
        total_actual = 0
        
        for user in users_with_commissions:
            # Get commission records
            commission_total = db.session.query(func.sum(Commission.amount)).filter(
                Commission.referrer_id == user.id
            ).scalar() or 0
            
            # Get withdrawals
            withdrawals = db.session.query(func.sum(Withdrawal.amount)).filter(
                Withdrawal.user_id == user.id,
                Withdrawal.status == 'approved'
            ).scalar() or 0
            
            # Calculate expected balance
            expected_balance = float(commission_total) - float(withdrawals)
            actual_balance = float(user.wallet.commission_balance)
            difference = expected_balance - actual_balance
            
            total_expected += expected_balance
            total_actual += actual_balance
            
            status = "‚úÖ OK" if abs(difference) < 0.01 else "‚ö†Ô∏è  ISSUE"
            
            print(f"üë§ {user.name} ({user.email})")
            print(f"   üí∞ Commission Records: KSh {commission_total:,.2f}")
            print(f"   üí∏ Withdrawals: KSh {withdrawals:,.2f}")
            print(f"   üßÆ Expected: KSh {expected_balance:,.2f}")
            print(f"   üí∞ Actual: KSh {actual_balance:,.2f}")
            print(f"   üìä Difference: KSh {difference:,.2f}")
            print(f"   {status}")
            print()
        
        print(f"üìä Summary:")
        print(f"   üí∞ Total Expected: KSh {total_expected:,.2f}")
        print(f"   üí∞ Total Actual: KSh {total_actual:,.2f}")
        print(f"   üìä Total Difference: KSh {total_expected - total_actual:,.2f}")

if __name__ == "__main__":
    print("üöÄ Commission Discrepancy Fix Script")
    print("-" * 50)
    
    print("‚ö†Ô∏è  IMPORTANT: Backup your database before running this script!")
    print("   This script will modify commission records and wallet balances.")
    
    response = input("\n‚ùì Do you want to proceed with fixing the discrepancies? (yes/no): ")
    
    if response.lower() in ['yes', 'y']:
        print(f"\nüîß Proceeding with fixes...")
        fix_commission_discrepancies()
        create_commission_reconciliation_report()
        
        print(f"\nüéØ Next Steps:")
        print("=" * 15)
        print("1. ‚úÖ Verify fixes in admin analytics dashboard")
        print("2. üîç Check data quality indicators")
        print("3. üìä Run commission analytics test again")
        print("4. üí∞ Test withdrawal system functionality")
        print("5. üì± Contact users about their commission balances")
        
    else:
        print(f"\n‚ùå Operation cancelled. No changes made to database.")
        print(f"   You can still run the investigation script to see the issues:")
        print(f"   python investigate_commission_discrepancy.py")
    
    print("\n‚úÖ Script completed!") 